version: 2.1

jobs:
  test:
    parallelism: 4
    docker:
      - image: cimg/python:3.11
    steps:
      - checkout

      - run:
          name: Install UV
          command: pip install uv

      - run:
          name: Create uv virtual environment
          command: uv venv

      - run:
          name: Set environment variables
          command: |
            echo "export PYTHONPATH=$(pwd)" >> $BASH_ENV
            echo "source .venv/bin/activate" >> $BASH_ENV

      - run:
          name: Install dependencies and testing tools
          command: |
            uv pip install -e ".[dev]"
            uv pip install nose2[coverage_plugin]
            uv pip install pytest pytest-cov pytest-xdist

      - run:
          name: Verify nose2 installation
          command: nose2 -h | head -1

      - run:
          name: Debug test discovery
          command: |
            echo "Test directories structure:"
            find src tests -type d | sort
            echo "\nTest files:"
            find src tests -name "test_*.py" | sort
            echo "\nNose2 Plugins (if config exists):"
            test -f nose2.cfg && cat nose2.cfg || echo "No nose2.cfg found"

      - run:
          name: Run tests
          command: |
            mkdir -p test-results
            echo "Running tests with nose2..."
            PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$PWD COVERAGE_FILE=.coverage nose2 -v --with-coverage --start-dir=src --junit-xml-path=test-results/junit.xml
            echo "\nChecking test results directory:"
            ls -la test-results/ || echo "Test results directory is empty"
            echo "\nChecking for coverage data:"
            ls -la .coverage || echo "No coverage data found"

      - run:
          name: Generate coverage reports
          command: |
            echo "Generating coverage reports..."
            if [ -f .coverage ]; then
              coverage report -m
              coverage xml -o test-results/coverage.xml
              coverage html -d test-results/coverage-html
            else
              echo "No coverage data found (.coverage file missing)"
              mkdir -p test-results/coverage-html
              echo "<html><body><h1>No coverage data collected</h1></body></html>" > test-results/coverage-html/index.html
              echo "<?xml version='1.0' encoding='utf-8'?><coverage></coverage>" > test-results/coverage.xml
            fi

      # Store test results (JUnit XML only)
      - store_test_results:
          path: test-results/junit.xml

      # Store all test-related artifacts
      - store_artifacts:
          path: test-results/
          destination: test-results

  code_quality:
    docker:
      - image: cimg/python:3.11
    steps:
      - checkout

      - run:
          name: Install UV
          command: pip install uv

      - run:
          name: Create uv virtual environment
          command: uv venv

      - run:
          name: Set environment variables
          command: |
            echo "export PYTHONPATH=$(pwd)" >> $BASH_ENV
            echo "source .venv/bin/activate" >> $BASH_ENV

      - run:
          name: Install dependencies and Black
          command: |
            uv pip install -e ".[dev]"
            uv pip install black

      - run:
          name: Run Black (code formatting)
          command: black src/ tests/

  dependency_scanning:
    docker:
      - image: cimg/python:3.11
    steps:
      - checkout

      - run:
          name: Install UV
          command: pip install uv

      - run:
          name: Create uv virtual environment
          command: uv venv

      - run:
          name: Set environment variables
          command: |
            echo "export PYTHONPATH=$(pwd)" >> $BASH_ENV
            echo "source .venv/bin/activate" >> $BASH_ENV

      - run:
          name: Install dependencies and Safety
          command: |
            uv pip install -e ".[dev]"
            uv pip install safety

      - run:
          name: Run Safety (dependency scanning)
          command: |
            if [ -f requirements.txt ]; then
              safety check --file=requirements.txt --full-report
            else
              safety check --full-report
            fi

workflows:
  version: 2
  test_and_scan:
    jobs:
      - test
      - code_quality
      - dependency_scanning
