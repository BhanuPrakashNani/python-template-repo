version: 2.1

jobs:
  build:
    working_directory: /tmp
    docker:
      - image: cimg/python:3.11
    steps:
      - checkout

      - run:
          name: Install dependencies
          command: pip install -r requirements.txt

      - run:
          name: Run tests
          command: |
            mkdir -p test-results
            nose2 --plugin=nose2.plugins.junitxml --junit-xml-path=test-results/junit.xml --with-coverage tests/

      - run:
          name: Generate coverage report
          command: |
            coverage xml -o coverage.xml

      - store_test_results:
          path: test-results/

      - store_artifacts:
          path: test-results/junit.xml
          destination: test-results

      - store_artifacts:
          path: coverage.xml
          destination: coverage-report

      - store_artifacts:
          path: /tmp/artifacts
          destination: custom-artifacts

      - run:
          name: Create custom artifacts
          command: |
            echo "This is a custom artifact file" > /tmp/artifacts/custom-artifact-1.txt
            mkdir -p /tmp/artifacts/subdir
            echo "This is another artifact in a subdirectory" > /tmp/artifacts/subdir/custom-artifact-2.txt

      - store_artifacts:
          path: /tmp/artifacts
          destination: custom-artifacts

  code_quality:
    docker:
      - image: cimg/python:3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: pip install -r requirements.txt
      - run:
          name: Run Black (code formatting)
          command: black src/ tests/
      # - run:
      #     name: Run Flake8 (linting)
      #     command: flake8 src/ tests/
      # - run:
      #     name: Run Bandit (security scanning)
      #     command: bandit -r src/

  dependency_scanning:
    docker:
      - image: cimg/python:3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: pip install -r requirements.txt
      - run:
          name: Install safety
          command: pip install safety
      - run:
          name: Run Safety (dependency scanning)
          command: safety check --full-report

workflows:
  version: 2
  test_and_scan:
    jobs:
      - test
      - code_quality
      - dependency_scanning
