version: 2.1

orbs:
  python: circleci/python@2.1

jobs:
  test:
    docker:
      - image: cimg/python:3.11
    steps:
      - checkout

      # Install UV
      - run:
          name: Install UV
          command: |
            curl -LsSf https://astral.sh/uv/install.sh | sh
            echo 'export PATH="/root/.cargo/bin:$PATH"' >> $BASH_ENV
            source $BASH_ENV

      # Install dependencies
      - run:
          name: Install Dependencies
          command: |
            uv pip install -e ".[test]"

      # Run unit tests with coverage
      - run:
          name: Run Unit Tests
          command: |
            mkdir test-results
            pytest src/components/*/tests/ --junitxml=test-results/unit.xml --cov=src --cov-report=xml:coverage.xml

      # Run integration tests
      - run:
          name: Run Integration Tests
          command: |
            pytest tests/integration/ --junitxml=test-results/integration.xml

      # Run E2E tests
      - run:
          name: Run E2E Tests
          command: |
            pytest tests/e2e/ --junitxml=test-results/e2e.xml

      # Store test results
      - store_test_results:
          path: test-results

      # Store coverage results
      - store_artifacts:
          path: coverage.xml

      # Report test summary
      - run:
          name: Test Summary
          when: always
          command: |
            echo "Test Results:"
            if [ -f test-results/unit.xml ]; then
              echo "Unit Tests:"
              grep -A1 "testsuites" test-results/unit.xml | tail -n1
            fi
            if [ -f test-results/integration.xml ]; then
              echo "Integration Tests:"
              grep -A1 "testsuites" test-results/integration.xml | tail -n1
            fi
            if [ -f test-results/e2e.xml ]; then
              echo "E2E Tests:"
              grep -A1 "testsuites" test-results/e2e.xml | tail -n1
            fi
            if [ -f coverage.xml ]; then
              echo "Coverage Report:"
              python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(f'Coverage: {root.attrib[\"line-rate\"]}%')"
            fi

workflows:
  version: 2
  build-test:
    jobs:
      - test
